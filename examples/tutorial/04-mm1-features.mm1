-- Include the contents of the previous tutorial file
import "03-mm1-intro.mm1";

-- A `do` block contains lisp code to be evaluated at the top level.
do {
  -- The curly braces are syntactic sugar to use infix syntax for operators.
  {2 + 2}
};

-- A simple factorial function
do {
  (def (fact x)
    (if {x = 0} 1 {x * (fact {x - 1})}))
  (fact 100)
};

-- Utility functions to help make proof scripts more compact
do {
  (def (id x) x)
  (def (ignore . _))
  (def dbg @ match-fn* [(x) (print x) x]
    [(x y) (display @ string-append (->string x) ": " (->string y)) y])
  (def (foldl l z s) (if (null? l) z (foldl (tl l) (s z (hd l)) s)))
  (def (foldr l z s) (if (null? l) z (s (hd l) (foldr (tl l) z s))))
  (def (range a b) (if {a = b} () (cons a (range {a + 1} b))))
  (def (for a b f) (if {a = b} #undef (begin (f a) (for {a + 1} b f))))
  (def last (match-fn [(a) a] [(_ . l) (last l)]))
  (def split-last @ match-fn
    [(and (_) l) l]
    [(a . l) @ match (split-last l) @ (r . l2) '(,r ,a . ,l2)]
    [() ()])
  (def (verb e) (copy-span e (list ':verb e)))
};

-- A simple `for` loop
do (for 1 6 (fn (x) (print x)));

-- A quoted atom, but the language server also shows the definition of
-- the theorem if you hover over the word "absurd",
-- and ctrl-clicking takes you to the definition.
do 'absurd;

-- Example of using `foldl` to repeatedy apply the `ax_mp` axiom
theorem _ (h1: $ a -> b $) (h2: $ a -> b -> c $): $ a -> c $ =
(foldl '(h2 h1) 'ax_2 @ fn (x y) '(ax_mp ,x ,y));
-- '(ax_mp (ax_mp ax_2 h2) h1);

-- `refine-extra-args` is a hook called when applying an axiom or theorem to
-- too many arguments. This example repeatedly applies `ax_mp` as needed.
do {
  (def (refine-extra-args refine tgt e . ps)
    @ refine tgt (foldl ps (verb e) @ fn (acc p2) @ copy-span e '(ax_mp ,acc ,p2)))
};

-- Example use of `refine-extra-args` to chain `ax_mp`
theorem _ (h1: $ a -> b $) (h2: $ a -> b -> c $): $ a -> c $ =
'(ax_2 h2 h1);

-- Example of calling `refine` explicitly
theorem _ (h1: $ a -> b $) (h2: $ a -> b -> c $): $ a -> c $ =
(refine '(ax_2 h2 h1));

-- Example of using the `focus` tactic. Try inserting calls to `(stat)`
-- to visualize how the goals change. The `_` in a proof pre-expression
-- means to create a new goal.
theorem _ (h1: $ a -> b $) (h2: $ a -> b -> c $): $ a -> c $ =
(focus
  '(ax_2 _ _)
  'h2
  'h1
);

-- Example of using `have` to declare a subproof as a named local hypothesis
theorem _ (h1: $ a -> b $) (h2: $ a -> b -> c $): $ a -> c $ =
(focus
  (have 'H $ a -> a $ 'id)
  '(ax_2 h2 h1)
);

-- Additional useful theorems from `peano.mm1`

theorem a1d (h: $ a -> b $): $ a -> c -> b $ = '(syl ax_1 h);
theorem a2d (h: $ a -> b -> c -> d $): $ a -> (b -> c) -> (b -> d) $ = '(syl ax_2 h);
theorem syld (h1: $ a -> b -> c $) (h2: $ a -> c -> d $): $ a -> b -> d $ = '(mpd h1 @ a2d @ a1d h2);
theorem syl5 (h1: $ b -> c $) (h2: $ a -> c -> d $): $ a -> b -> d $ = '(syld (a1i h1) h2);
theorem imim2: $ (b -> c) -> (a -> b) -> (a -> c) $ = '(a2d ax_1);
theorem imim2i (h: $ b -> c $): $ (a -> b) -> (a -> c) $ = '(imim2 h);
theorem mpcom: $ a -> (a -> b) -> b $ = '(com12 id);
theorem imidm: $ (a -> a -> b) -> a -> b $ = '(a2i mpcom);
theorem contra: $ (~a -> a) -> a $ = '(imidm (a3d (a2i absurd)));
theorem dne: $ ~~a -> a $ = '(syl contra absurd);
theorem con2: $ (a -> ~b) -> (b -> ~a) $ = '(a3d (syl5 dne id));
theorem notnot1: $ a -> ~~a $ = '(con2 id);
theorem con1: $ (~a -> b) -> (~b -> a) $ = '(a3d (imim2i notnot1));
theorem anl: $ a /\ b -> a $ = '(con1 absurd);
theorem anr: $ a /\ b -> b $ = '(con1 ax_1);
theorem anwl (h: $ a -> c $): $ a /\ b -> c $ = '(syl h anl);
theorem anwr (h: $ b -> c $): $ a /\ b -> c $ = '(syl h anr);

-- Function to repeatedly apply `anwl` and `anwr` to prove an implication
-- where the antecedent is a chain of conjunctions
do (def (conj-prove refine t)
  @ match t @ $ ,lhs -> ,rhs $
  @ letrec (
    [(f lhs)
      @ match lhs
      [$ ,l /\ ,r $
        @ match (f l)
          [#undef
            @ match (f r)
            [#undef #undef]
            [result '(anwr ,result)]]
          [result '(anwl ,result)]]
      [_ @ if {lhs == rhs} 'id]]
  )
  @ refine t (f lhs));

-- Examples of using `conj-prove`

theorem _: $ a /\ b /\ c /\ (d /\ e) -> d $ = conj-prove;
theorem _: $ a /\ b /\ (d /\ e) -> d $ = conj-prove;
theorem _: $ a /\ b /\ (e /\ d) -> d $ = conj-prove;
theorem _: $ d /\ b /\ (e /\ d) -> d $ = conj-prove;
theorem _: $ d /\ b /\ (e /\ d) -> b $ = conj-prove;
theorem _: $ b -> b $ = conj-prove;

-- Call `conj-prove` with `dbg` in place of `refine` to see the script that
-- it produces
do (conj-prove dbg $ a /\ b /\ (e /\ d) /\ f /\ g -> d $);

-- You can also print the proof of a theorem after the fact using the `get-proof`
-- function, which shows the fully elaborated proof term.

-- you have to give it a name to call `get-proof`
theorem foo: $ a /\ b /\ (e /\ d) /\ f /\ g -> d $ = conj-prove;

do {
  -- borrowed from peano.mm1
  (def (get-proof x) (nth 1 @ @ nth 6 @ get-decl x))

  (display @ pp @ get-proof 'foo)
  -- (anwl (a /\ b /\ (e /\ d) /\ f) g d
  --   (anwl (a /\ b /\ (e /\ d)) f d
  --     (anwr (a /\ b) (e /\ d) d (anwr e d d (id d)))))
};

-- Some examples of explicitly applying the resulting scripts using `focus`,
-- to help visualize the effects of the proof steps

theorem _: $ a /\ b /\ (e /\ d) /\ f /\ g -> d $ = (focus 'anwl 'anwl 'anwr 'anwr 'id);
theorem _: $ a /\ b /\ c /\ (d /\ e) -> d $ = (focus 'anwr 'anwl 'id);
